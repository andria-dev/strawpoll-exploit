import click
import requests
import re
import json
from bs4 import BeautifulSoup

def get_option_value(poll_id: str, option: str) -> str | None:
  url = f"https://strawpoll.com/{poll_id}"
  payload = ""
  headers = {
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0",
      "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
      "Accept-Language": "en-US,en;q=0.5",
      "Accept-Encoding": "gzip, deflate, br",
      "DNT": "1",
      "Connection": "keep-alive",
      "Upgrade-Insecure-Requests": "1",
      "Sec-Fetch-Dest": "document",
      "Sec-Fetch-Mode": "navigate",
      "Sec-Fetch-Site": "none",
      "Sec-Fetch-User": "?1",
      "TE": "trailers"
  }
  response = requests.request("GET", url, data=payload, headers=headers)

  soup = BeautifulSoup(response.text, "html.parser")
  for option_wrapper in soup.select("strawpoll-option"):
    if option_wrapper.get_text() == option:
      return option_wrapper.select_one("input").get("value")
  return None


def get_new_session(poll_id: str) -> str:
  url = f"https://strawpoll.com/{poll_id}"
  payload = ""
  headers = {
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0",
      "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
      "Accept-Language": "en-US,en;q=0.5",
      "Accept-Encoding": "gzip, deflate, br",
      "DNT": "1",
      "Connection": "keep-alive",
      "Upgrade-Insecure-Requests": "1",
      "Sec-Fetch-Dest": "document",
      "Sec-Fetch-Mode": "navigate",
      "Sec-Fetch-Site": "none",
      "Sec-Fetch-User": "?1",
      "TE": "trailers"
  }
  response = requests.request("GET", url, data=payload, headers=headers)
  return response.cookies.get("session")


def vote(poll_id: str, session: str, option: str, count: int) -> None:
  url = f"https://api.strawpoll.com/v3/polls/{poll_id}/vote"

  poll_votes = [{"id": option, "value": 1} for _ in range(0, count)]
  payload = json.dumps({
    "pv": "f83a37e2-7c0a-11ee-85b0-91bd7033bd73",
    "v": {
      "id": "",
      "name": "",
      "pollVotes": poll_votes,
      "voteType": "add",
      "token": "",
      "isEmbed": False
    },
    "h": False,
    "ht": False,
    "token": None
  })
  headers = {
      "cookie": f"session={session}",
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0",
      "Accept": "*/*",
      "Accept-Language": "en-US,en;q=0.5",
      "Accept-Encoding": "gzip, deflate, br",
      "Referer": "https://strawpoll.com/",
      "X-CSRF-TOKEN": "a5b576bea456b92ce43815f0b48631c595adce29",
      "Content-Type": "text/plain;charset=UTF-8",
      "Origin": "https://strawpoll.com",
      "DNT": "1",
      "Connection": "keep-alive",
      "Cookie": "session=eyJjb3VudHJ5X2NvZGUiOiJ1cyIsImNzcmZfdG9rZW4iOiJhNWI1NzZiZWE0NTZiOTJjZTQzODE1ZjBiNDg2MzFjNTk1YWRjZTI5IiwiZXhwaXJlcyI6MTczMDc0NjI2NCwiaWQiOiJkZGFlODE2OC03YzA5LTExZWUtYWU5ZS1mN2NmYmI4ZjUzZjcifVpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaâ€¦paWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlo---6e4c68e35584920921cbff00ba30b809aea09957ec3eeefc7f5796b039d4ac4f---a26d8c6fea302f849fa83410aa81efdf6a883ac3facb9303bb7e3f8a15cc7f4f",
      "Sec-Fetch-Dest": "empty",
      "Sec-Fetch-Mode": "cors",
      "Sec-Fetch-Site": "same-site"
  }

  response = requests.request("POST", url, data=payload, headers=headers)
  click.echo(response.text)

def get_poll_id(url: str) -> str | None:
  match = re.search(r'strawpoll.com/([^?/]+)$', url)
  if match:
    return match.group(1)
  else:
    return None

@click.command()
@click.argument("strawpoll_url", required=True, type=str)
@click.argument("poll_option", required=True, type=str)
@click.argument("count", required=True, type=int)
def main(strawpoll_url, poll_option, count):
  """
    Takes the Strawpoll URL (e.g. https://strawpoll.com/abcdefg1234), the option to vote for, and the number (i.e. count) of votes required to submit the poll and votes for that option the specified count times.
  """
  poll_id = get_poll_id(strawpoll_url)
  option = get_option_value(poll_id, poll_option)
  vote(poll_id, get_new_session(poll_id), option, count)

if __name__ == '__main__':
  main()
